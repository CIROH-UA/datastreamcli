name: Build and Test DataStream CLI on X86
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
    paths:
      - 'docker/**' 
      - 'src/datastreamcli/**'
      - 'tests/**'
      - '!src/datastreamcli/README.md'
  pull_request:
    paths:
      - 'docker/**' 
      - 'src/datastreamcli/**'
      - 'tests/**'
      - '!src/datastreamcli/README.md'

permissions:
  contents: read
  security-events: write

jobs:
  build-x86:
    runs-on: ubuntu-latest
    steps:
      - name: Pre-cleanup workspace
        continue-on-error: true
        run: |
          sudo rm -rf ${{ github.workspace }}/* || true
          sudo rm -rf ${{ github.workspace }}/.* || true
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1
          
      - name: Build datastream-deps
        run: |
          cd docker
          export TAG=latest-x86
          docker compose -f docker-compose.yml build datastream-deps
            
      - name: Build datastream
        run: |
          cd docker
          export TAG=latest-x86
          docker compose -f docker-compose.yml build datastream
            
      - name: List built images
        run: docker images | grep datastream

      - name: Save Docker images
        run: |
          docker save awiciroh/datastream:latest-x86 | gzip > /tmp/datastream-x86.tar.gz
          
      - name: Upload datastream image
        uses: actions/upload-artifact@v4
        with:
          name: datastream-x86
          path: /tmp/datastream-x86.tar.gz
          retention-days: 1

      - name: Clean up local tar files
        if: always()
        run: rm -f /tmp/datastream-x86.tar.gz

  test-x86:
    needs: build-x86
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        test-suite:
          # Validation Tests
          - name: "Validation - Missing Geopackage"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_missing_geopackage"
          
          - name: "Validation - Duplicate Geopackage"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_duplicate_geopackage"
          
          - name: "Validation - Missing Realization"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_missing_realization"
          
          - name: "Validation - Duplicate Realization"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_duplicate_realization"
          
          - name: "Validation - Missing BMI Config"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_missing_bmi_config"
          
          - name: "Validation - Missing Forcings"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_missing_forcings"
          
          - name: "Validation - Forcings Time Axis"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_forcings_time_axis"
          
          - name: "Validation - Missing T-Route Config"
            image: "datastream"
            command: "pytest -vv tests/test_validation.py::test_missing_troute_config"
          
          # BMI Config Generation Tests
          - name: "BMI Config - PKL v2.1"
            image: "datastream"
            command: "pytest -vv tests/test_bmi_config_generation.py::test_pkl_v21"
          
          - name: "BMI Config - NOAH-OWP-M v2.1"
            image: "datastream"
            command: "pytest -vv tests/test_bmi_config_generation.py::test_noah_owp_m_v21"
          
          - name: "BMI Config - CFE v2.1"
            image: "datastream"
            command: "pytest -vv tests/test_bmi_config_generation.py::test_cfe_v21"
          
          - name: "BMI Config - PET v2.1"
            image: "datastream"
            command: "pytest -vv tests/test_bmi_config_generation.py::test_pet_v21"
          
          - name: "BMI Config - Routing v2.1"
            image: "datastream"
            command: "pytest -vv tests/test_bmi_config_generation.py::test_routing_v21"
          
          # Configuration Tests
          - name: "Configuration - Basic"
            image: "datastream"
            command: "pytest -vv tests/test_configuration.py::test_conf_basic"
          
          - name: "Configuration - Daily"
            image: "datastream"
            command: "pytest -vv tests/test_configuration.py::test_conf_daily"
          
          - name: "Configuration - Daily Pick"
            image: "datastream"
            command: "pytest -vv tests/test_configuration.py::test_conf_daily_pick"

    name: "${{ matrix.test-suite.name }}"
    
    steps:
      - name: Pre-cleanup workspace
        continue-on-error: true
        run: |
          sudo rm -rf ${{ github.workspace }}/* || true
          sudo rm -rf ${{ github.workspace }}/.* || true
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: datastream-x86  
          path: /tmp/artifacts

      - name: Verify artifact and load
        run: |
          set -euo pipefail
          ls -lh /tmp/artifacts
          
          for i in 1 2 3; do
            if gunzip -c /tmp/artifacts/datastream-x86.tar.gz | docker load; then
              echo "Successfully loaded image on attempt $i"
              docker images | grep datastream
              break
            else
              echo "Failed to load image on attempt $i"
              if [ $i -lt 3 ]; then
                echo "Retrying in 10 seconds..."
                sleep 10
              else
                exit 1
              fi
            fi
          done
          
      - name: Run ${{ matrix.test-suite.name }}
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/datastreamcli \
            -w /datastreamcli \
            -e AWS_REGION=us-east-1 \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            awiciroh/${{ matrix.test-suite.image }}:latest-x86 \
            ${{ matrix.test-suite.command }}
          
  cleanup-artifacts:
    needs: test-x86
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: datastream-x86