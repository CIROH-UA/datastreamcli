name: Build, Push DataStream Docker Containers on X86, ARM
on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to build from (leave empty to use current branch)'
        required: false
        default: ''
        type: string
  push:
    branches:
      - main

    paths:
      - 'versions.yml'
  pull_request:
    paths:
      - 'versions.yml'

permissions:
  contents: read
  security-events: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      build_deps: ${{ steps.changes.outputs.build_deps }}
      build_ds: ${{ steps.changes.outputs.build_ds }}
      deps_version: ${{ steps.changes.outputs.deps_version }}
      ds_version: ${{ steps.changes.outputs.ds_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Install yq
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq

    - name: Detect version changes
      id: changes
      shell: bash
      run: |
        set -euo pipefail
        # Current versions (raw)
        CURRENT_DEPS=$(yq -r e '."datastream-deps"' versions.yml)
        CURRENT_DS=$(yq -r e '.datastream' versions.yml)

        # Ensure previous commit and file exist
        if git rev-parse HEAD~1 >/dev/null 2>&1 && git cat-file -e HEAD~1:versions.yml 2>/dev/null; then
          git show HEAD~1:versions.yml > previous_versions.yml
            else
              printf "datastream-deps: '0.0.0'\ndatastream: '0.0.0'\n" > previous_versions.yml
            fi

            PREVIOUS_DEPS=$(yq -r e '."datastream-deps"' previous_versions.yml)
            PREVIOUS_DS=$(yq -r e '.datastream' previous_versions.yml)

            # Check what changed and set outputs
            if [ "$CURRENT_DEPS" != "$PREVIOUS_DEPS" ]; then
              echo "datastream-deps changed: $PREVIOUS_DEPS -> $CURRENT_DEPS"
              echo "build_deps=true" >> "$GITHUB_OUTPUT"
            else
              echo "build_deps=false" >> "$GITHUB_OUTPUT"
            fi
            echo "deps_version=$CURRENT_DEPS" >> "$GITHUB_OUTPUT"
        
            if [ "$CURRENT_DS" != "$PREVIOUS_DS" ]; then
              echo "datastream changed: $PREVIOUS_DS -> $CURRENT_DS"
              echo "build_ds=true" >> "$GITHUB_OUTPUT"
            else
              echo "build_ds=false" >> "$GITHUB_OUTPUT"
            fi
            echo "ds_version=$CURRENT_DS" >> "$GITHUB_OUTPUT"

  build-test-push-docker-x86:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1
         
    - name: Build docker containers
      run: |
          if [ "${{ needs.detect-changes.outputs.build_deps }}" == "true" ]; then
            echo "Building datastream-deps..."
            TAG=latest-x86 docker compose -f docker/docker-compose.yml build datastream-deps
          fi
          
          if [ "${{ needs.detect-changes.outputs.build_ds }}" == "true" ]; then
            echo "Building datastream..."
            TAG=latest-x86 docker compose -f docker/docker-compose.yml build datastream
          fi


    - name: Run Trivy vulnerability scan - deps (JSON for artifacts)
      if:  needs.detect-changes.outputs.build_deps == 'true'
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'awiciroh/datastream-deps:latest-x86'
        format: 'json'
        output: 'trivy-deps-x86-results.json'
        severity: 'CRITICAL'
        exit-code: '1'

    - name: Run Trivy vulnerability scan - ds (JSON for artifacts)
      if:  needs.detect-changes.outputs.build_ds == 'true'
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'awiciroh/datastream:latest-x86'
        format: 'json'
        output: 'trivy-ds-x86-results.json'
        severity: 'CRITICAL'
        exit-code: '1'

    - name: Save Trivy results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-results-x86
        path: |
          trivy-deps-x86-results.json
          trivy-ds-x86-results.json
        retention-days: 10

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push docker containers
      run: |
        if [ "${{ needs.detect-changes.outputs.build_deps }}" == "true" ]; then
          VERSION_TAG="${{ needs.detect-changes.outputs.deps_version }}"
          docker tag awiciroh/datastream-deps:latest-x86 awiciroh/datastream-deps:${VERSION_TAG}-x86
          docker push awiciroh/datastream-deps:${VERSION_TAG}-x86
          docker push awiciroh/datastream-deps:latest-x86
        fi
        if [ "${{ needs.detect-changes.outputs.build_ds }}" == "true" ]; then
          VERSION_TAG="${{ needs.detect-changes.outputs.ds_version }}"
          docker tag awiciroh/datastream:latest-x86 awiciroh/datastream:${VERSION_TAG}-x86
          docker push awiciroh/datastream:${VERSION_TAG}-x86
          docker push awiciroh/datastream:latest-x86
        fi


    
  build-test-push-docker-arm:
    needs: [detect-changes, build-test-push-docker-x86]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Configure AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1        

      # Dynamically configures the test execution JSON by setting the branch name and conditionally removing Docker build commands for containers whose Dockerfiles haven't changed (optimization only applies to push events, not manual triggers)
      - name: Prepare execution config
        id: prep_config 
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.branch_name }}" ]; then
            BRANCH_NAME="${{ inputs.branch_name }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          sed -i "s|\${BRANCH_NAME}|$BRANCH_NAME|g" .github/executions/ds_push_execution_arm.json
          if [ "${{ needs.detect-changes.outputs.build_deps }}" != "true" ]; then
            sed -i "/docker-compose\.yml build datastream-deps/d" .github/executions/ds_push_execution_arm.json
          fi

          if [ "${{ needs.detect-changes.outputs.build_ds }}" != "true" ]; then
            sed -i "/docker-compose\.yml build datastream/d" .github/executions/ds_push_execution_arm.json
          fi
          BUILD_FLAGS=""
          DEPS_TAG=""
          DS_TAG=""
          # Build flags and determine the most recent version for TAG
          if [ "${{ needs.detect-changes.outputs.build_deps }}" == "true" ]; then
            BUILD_FLAGS="$BUILD_FLAGS -e"
            DEPS_TAG="${{ needs.detect-changes.outputs.deps_version }}-arm64"
          fi
          if [ "${{ needs.detect-changes.outputs.build_ds }}" == "true" ]; then
            BUILD_FLAGS="$BUILD_FLAGS -f"
            DS_TAG="${{ needs.detect-changes.outputs.ds_version }}-arm64"
          fi

          if [ -z "$BUILD_FLAGS" ]; then
            echo "No components changed, skipping ARM build"
            echo "skip_arm_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ -z "$DEPS_TAG" ]; then
            DEPS_TAG="latest-arm64"  
          fi

          if [ -z "$DS_TAG" ]; then
            DS_TAG="latest-arm64"  
          fi

          BUILD_FLAGS=$(echo "$BUILD_FLAGS" | sed 's/^ *//')

          sed -i -e "s/\${DEPS_TAG}/$DEPS_TAG/g" -e "s/\${DS_TAG}/$DS_TAG/g" -e "s/\${BUILD_ARGS}/$BUILD_FLAGS/g" \
            .github/executions/ds_push_execution_arm.json
          
          echo "Generated execution file:"
          cat .github/executions/ds_push_execution_arm.json

          echo "Building with DEPS_TAG: $DEPS_TAG, DS_TAG: $DS_TAG and FLAGS: $BUILD_FLAGS"
          cat .github/executions/ds_push_execution_arm.json

      - name: clone ngen
        if: steps.prep_config.outputs.skip_arm_build != 'true'
        run: |
          git clone --single-branch --branch main --depth 1 https://github.com/CIROH-UA/ngen-datastream.git

      - name: Build AWS Infra
        if: steps.prep_config.outputs.skip_arm_build != 'true'
        working-directory: ngen-datastream/infra/aws/terraform/modules/orchestration
        run: |
          terraform init
          terraform validate
          ../../../shell/import_resources.sh variables.tfvars
          terraform apply -var-file=variables.tfvars -auto-approve
          sleep 60

      - name: Set permissions
        if: steps.prep_config.outputs.skip_arm_build != 'true'
        working-directory: ngen-datastream/infra/aws/terraform/modules/orchestration
        run : |
          aws secretsmanager put-resource-policy --secret-id docker_awiciroh_creds --resource-policy file://$GITHUB_WORKSPACE/.github/executions/secret-policy.json --block-public-policy --region us-east-1
          if ! aws ec2 describe-key-pairs --key-names "actions_key_arm" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null; then aws ec2 create-key-pair --key-name "actions_key_arm" --query 'KeyName' --output text && echo "Key pair 'actions_key_arm' created in AWS"; else echo "Key pair 'actions_key_arm' already exists"; fi
          sleep 60


      - name: Build and Test arm docker containers with AWS infra
        if: steps.prep_config.outputs.skip_arm_build != 'true'
        id: stepfunction_execution
        run : |
          cd ngen-datastream/infra/aws/terraform/modules/orchestration
          execution_arn=$(aws stepfunctions start-execution --state-machine-arn $(cat ./sm_ARN.txt) --name docker_builder_$(env TZ=US/Eastern date +'%Y%m%d%H%M%S') --input "file://$GITHUB_WORKSPACE/.github/executions/ds_push_execution_arm.json" --region us-east-1 --query 'executionArn' --output text)
          echo "Execution ARN: $execution_arn"
          echo "execution_arn=$execution_arn" >> $GITHUB_OUTPUT
          echo "$execution_arn" > $GITHUB_WORKSPACE/execution_arn.txt
          
          status="RUNNING"
          while [ "$status" != "SUCCEEDED" ]; do 
            status=$(aws stepfunctions describe-execution --execution-arn "$execution_arn" --region us-east-1 --query 'status' --output text)
            echo "Current status: $status"
            if [ "$status" == "FAILED" ]; then 
              echo "State machine execution failed!"
              exit 1
            fi
            sleep 5
          done
          echo "State machine execution succeeded!"

      - name: Download Step Function execution logs
        if: always() && steps.prep_config.outputs.skip_arm_build != 'true'
        run: |
          # Try to get execution_arn from output first, then fallback to file
          execution_arn="${{ steps.stepfunction_execution.outputs.execution_arn }}"
          if [ -z "$execution_arn" ] && [ -f "$GITHUB_WORKSPACE/execution_arn.txt" ]; then
            execution_arn=$(cat $GITHUB_WORKSPACE/execution_arn.txt)
          fi
          
          if [ -z "$execution_arn" ]; then
            echo "No execution ARN found, skipping log download"
            exit 0
          fi
          
          echo "Downloading logs for execution: $execution_arn"
          
          # Get execution history
          aws stepfunctions get-execution-history \
            --execution-arn "$execution_arn" \
            --region us-east-1 \
            --output json > $GITHUB_WORKSPACE/stepfunction-execution-history.json
          
          # Get execution details
          aws stepfunctions describe-execution \
            --execution-arn "$execution_arn" \
            --region us-east-1 \
            --output json > $GITHUB_WORKSPACE/stepfunction-execution-details.json
          
          echo "Logs downloaded successfully"

      - name: Upload Step Function logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stepfunction-logs-${{ github.run_number }}
          path: |
            stepfunction-execution-history.json
            stepfunction-execution-details.json
          retention-days: 30

      - name: Download build logs from S3
        if: always()
        run: |
          aws s3 cp s3://ciroh-community-ngen-datastream/datastream/test/docker_build_log.txt $GITHUB_WORKSPACE/docker_build_log.txt || true
          if [ -f $GITHUB_WORKSPACE/docker_build_log.txt ]; then
            cat $GITHUB_WORKSPACE/docker_build_log.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload build logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-logs-${{ github.run_number }}
          path: docker_build_log.txt
          if-no-files-found: ignore
          retention-days: 30
          

      - name: Tear down infra
        if: always() && steps.prep_config.outputs.skip_arm_build != 'true'
        working-directory: ngen-datastream/infra/aws/terraform/modules/orchestration
        run : |
          terraform destroy -var-file=variables.tfvars -auto-approve
          sleep 60



  create-manifest:
    name: Create and Push Manifest
    needs: [detect-changes, build-test-push-docker-arm]
    if: needs.detect-changes.outputs.build_deps == 'true' || needs.detect-changes.outputs.build_ds == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest datastream-deps
        if: needs.detect-changes.outputs.build_deps == 'true'
        run: |
          docker manifest create awiciroh/datastream-deps:${{ needs.detect-changes.outputs.deps_version }} \
            --amend awiciroh/datastream-deps:${{ needs.detect-changes.outputs.deps_version }}-x86 \
            --amend awiciroh/datastream-deps:${{ needs.detect-changes.outputs.deps_version }}-arm64
          docker manifest push awiciroh/datastream-deps:${{ needs.detect-changes.outputs.deps_version }}

          docker manifest create awiciroh/datastream-deps:latest \
            --amend awiciroh/datastream-deps:latest-x86 \
            --amend awiciroh/datastream-deps:latest-arm64
          docker manifest push awiciroh/datastream-deps:latest
 

      - name: Create and push manifest datastream
        if: needs.detect-changes.outputs.build_ds == 'true'
        run: |
          docker manifest create awiciroh/datastream:${{ needs.detect-changes.outputs.ds_version }} \
            --amend awiciroh/datastream:${{ needs.detect-changes.outputs.ds_version }}-x86 \
            --amend awiciroh/datastream:${{ needs.detect-changes.outputs.ds_version }}-arm64
          docker manifest push awiciroh/datastream:${{ needs.detect-changes.outputs.ds_version }}

          docker manifest create awiciroh/datastream:latest \
            --amend awiciroh/datastream:latest-x86 \
            --amend awiciroh/datastream:latest-arm64
          docker manifest push awiciroh/datastream:latest