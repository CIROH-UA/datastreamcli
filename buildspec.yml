version: 0.2

env:
  variables:
    DOCKER_BUILDKIT: "1"
    COMPOSE_DOCKER_CLI_BUILD: "1"
  parameter-store:
    DOCKER_USERNAME: /codebuild/docker/username
    DOCKER_PASSWORD: /codebuild/docker/password

phases:
  pre_build:
    commands:
      - echo "Running on $(uname -m) architecture"
      - echo "Build started at $(date)"
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      
  build:
    commands:
      - echo "Building Docker images..."
      - cd docker
      - echo "Building datastream-deps..."
      - export TAG=latest-arm64
      - docker compose -f docker-compose.yml build datastream-deps
      - echo "Building datastream..."
      - docker compose -f docker-compose.yml build datastream
      - cd ..
      - echo "Build completed at $(date)"
      - docker images | grep datastream

  post_build:
    commands:
      - echo "Running all tests..."
      - echo "Test execution started at $(date)"
      - mkdir -p test-results
      - |
        docker run --rm \
          -v $(pwd):/datastream \
          -w /datastream \
          -e AWS_REGION=${AWS_REGION:-us-east-1} \
          -e AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1} \
          -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
          -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
          -e AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN} \
          awiciroh/datastream:latest-arm64 \
          bash -c "
            echo '================================================'
            echo 'Running Validation Tests'
            echo '================================================'
            pytest -vv tests/test_validation.py --junit-xml=/datastream/test-results/validation.xml
            
            echo ''
            echo '================================================'
            echo 'Running BMI Config Generation Tests'
            echo '================================================'
            pytest -vv tests/test_bmi_config_generation.py --junit-xml=/datastream/test-results/bmi_config.xml
            
            echo ''
            echo '================================================'
            echo 'Running Configuration Tests'
            echo '================================================'
            pytest -vv tests/test_configuration.py --junit-xml=/datastream/test-results/configuration.xml
            
            echo ''
            echo '================================================'
            echo 'All Tests Completed!'
            echo '================================================'
          " 2>&1 | tee test-output.log
      - echo "Test execution completed at $(date)"
      
      # Display summary
      - |
        echo ""
        echo "================================================"
        echo "Test Results Summary"
        echo "================================================"
        if [ -f test-results/validation.xml ]; then
          PASSED=$(grep -o 'tests="[0-9]*"' test-results/validation.xml | grep -o '[0-9]*' || echo "0")
          FAILED=$(grep -o 'failures="[0-9]*"' test-results/validation.xml | grep -o '[0-9]*' || echo "0")
          echo "Validation Tests: $PASSED passed, $FAILED failed"
        fi
        if [ -f test-results/bmi_config.xml ]; then
          PASSED=$(grep -o 'tests="[0-9]*"' test-results/bmi_config.xml | grep -o '[0-9]*' || echo "0")
          FAILED=$(grep -o 'failures="[0-9]*"' test-results/bmi_config.xml | grep -o '[0-9]*' || echo "0")
          echo "BMI Config Tests: $PASSED passed, $FAILED failed"
        fi
        if [ -f test-results/configuration.xml ]; then
          PASSED=$(grep -o 'tests="[0-9]*"' test-results/configuration.xml | grep -o '[0-9]*' || echo "0")
          FAILED=$(grep -o 'failures="[0-9]*"' test-results/configuration.xml | grep -o '[0-9]*' || echo "0")
          echo "Configuration Tests: $PASSED passed, $FAILED failed"
        fi
        echo "================================================"

reports:
  pytest_reports:
    files:
      - 'test-results/*.xml'
    file-format: JUNITXML

artifacts:
  files:
    - 'test-results/*.xml'
    - 'test-output.log'
  name: test-results-$CODEBUILD_BUILD_NUMBER

cache:
  paths:
    - '/var/lib/docker/**/*'
    - '/root/.cache/pip/**/*'